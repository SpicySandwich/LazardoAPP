package com.client.LazardoClient.Validation;

import java.util.Optional;

import com.client.LazardoClient.DAO.ValidationRepo;
import com.client.LazardoClient.ModelException.InvalidException;
import com.client.LazardoClient.ModelException.NotNullException;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

@Service
public class ClientInputValidation {
	
	@Autowired
	private ClientRepoValidation validation;
	
	@Autowired
	private ValidationRepo validationRepo;
	
	
	public boolean checkEmailFormatSignUp( String email) {
		 validation.emailValidationSignUp(email);
		 
	  Optional.ofNullable(email)
		.filter(word -> word.matches("^(.+)@(.+)$") && !word.trim().isEmpty())
		.orElseThrow(()-> new NotNullException("Email invalid format or empty"));
		
		return false;
	}
	
	public String checkUsernameNotNullSignUp(String username) {
		
		return Optional.ofNullable(username)
		.filter(user -> !user.trim().isEmpty())
		.map(user -> {
			return username;
		}).orElseThrow(() -> new  NotNullException("Username is empty"));
		
		
	}
	
	public String checkPasswordFormatSignUp(String password) {
		
		Optional.ofNullable(password)
		.filter(pass -> !pass.matches("^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[!@#&()â€“[{}]:;',?/*~$^+=<>]).{7,15}$"))
		.map(pass -> {
			throw new InvalidException("Password must contain at "
					+ "least one digit [0-9],one lowercase Latin character [a-z],"
					+ "least one uppercase Latin character [A-Z],"
					+ "least least one special character like ! @ # & ( ),"
					+ "length of at least 7 characters and a maximum of 15 characters");
		});	
		return checkPasswordNotNull(password);
	}
	
	
	public String checkPasswordNotNull(String password) {
		
		Optional.ofNullable(password)
		.filter(pass -> !pass.trim().isEmpty())
		.orElseThrow(() -> new NotNullException("Password is empty "));	
		
		return password;
	}


	public Double checkDouble(Double balance) {
    boolean check =	Double.compare(balance, 0.0) < 0;
    
    Optional.of(check)
    .filter(Boolean::booleanValue)
    .map(check2 -> {
    	throw new InvalidException("Balance can't be negative value");
    });

		return  balance;
	}

	 public String checkEmailTrue(String email) {
		 
		 Optional.ofNullable(email)
		 .orElseThrow(() -> new NotNullException("Email is null"));
		 
		 boolean check =	 validationRepo.ifEmailExist(email);
		 
		 Optional.of(check)
		 .filter(Boolean::booleanValue)
		 .map(check2 -> {
			 return email;
		 });
		 throw new InvalidException("Email don't exist");
	 }
	 
	 public String checkEmailFalse(String email) {
		 
		 Optional.ofNullable(email)
		 .orElseThrow(() -> new NotNullException("Email is null"));
		 
		 boolean check =	 validationRepo.ifEmailExist(email);
		 
		 Optional.of(check)
		 .filter(Boolean::booleanValue)
		 .map(check2 -> {
			 throw new InvalidException("Email already exist");
		 });
			return email;
		 }
	 
	 public Integer checkRole(Integer role) {
		String check =	String.valueOf(role);
		
		Optional.ofNullable(check)
		.filter(word -> word.matches("[1-2]"))
		.orElseThrow(() -> new InvalidException("Role don't exist"));
		
          return role;

		 }
	 
	 public String checkProductName(String productname) {
		 
		 Optional.ofNullable(productname)
		 .orElseThrow(() -> new InvalidException("Product name is empty"));

		return productname;
	 }
	 
	 public String checkProductBrand(String productbrand) {
		 
		 Optional.ofNullable(productbrand)
		 .orElseThrow(() -> new InvalidException("Product brand is empty"));
	
		return productbrand;
	 }
	 
	 public String checkProductComment(String productcomment) {
		 
		 Optional.ofNullable(productcomment)
		 .orElseThrow(() -> new InvalidException("Product comment is empty"));

		return productcomment;
	 }
	 
		public Integer checkProductIDBuyer(Integer productID , String email){
			
			Optional.of(validationRepo.ifProductExistBuyer(productID, email))
			.filter(Boolean::booleanValue)
			.orElseThrow(() -> new InvalidException("Product is unavailable to be deleted"));
			return productID;
		}
		
		public void checkProductIDBuyerCartProduct(Integer productID){
			
			Optional.of(validationRepo.ifProductAvailableCart(productID))
			.filter(Boolean::booleanValue)
			.orElseThrow(() ->  new InvalidException("Product is unavailable to be cart"));
		}
		
		public Integer checkProductIDSellerr(Integer productID , String email){
			
			Optional.of(validationRepo.ifProductExistSeller(productID, email))
			.filter(Boolean::booleanValue)
			.orElseThrow(() ->  new InvalidException("Product is unavailable to be deleted Or Product is already purchase by buyer "));
			return productID;
		}
		
		public void checkProductIDUpdateExist(Integer productID , String email) {
			
			Optional.of(validationRepo.ifProductExistSellerProductUpdate(productID, email))
			.filter(Boolean::booleanValue)
			.orElseThrow(() ->  new InvalidException("Product is unavailable to update or don't exist"));
		}
		
		public void checkBuyerCartProductPaymentUnpaid(String buyeremail, Integer purchaseid) {
			
			Optional.of(validationRepo.ifBuyerCartProductUnpaidPayment(buyeremail, purchaseid))
			.filter(Boolean::booleanValue)
			.orElseThrow(() -> new InvalidException("Product already paid or don't exist"));
			}

}
