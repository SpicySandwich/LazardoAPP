package com.client.LazardoClient.Validation;

import java.time.LocalDate;
import java.time.ZoneId;
import java.time.format.DateTimeFormatter;
import java.util.Date;

import com.client.LazardoClient.ModelException.InvalidException;
import com.client.LazardoClient.ModelException.NotNullException;

public class LocalDateTimeValidation {
	
	public void DateValidationError(String string) {
		 
	    DateValidationError(string);
		
		}

	public String DateNotNull(String date) {
		  
		    if (date.trim().isEmpty() || date == null) throw new NotNullException("Date cannot be empty");
		    
		    return date;
		    
		}


	public String DateFormatValidation(String input) {
		String dString =  DateNotNull(input);
		 if (!dString.matches(
				 " ^((?:(?:1[6-9]|2[0-9])\\d{2})(-)(?:(?:(?:0[13578]|1[02])(-)31)|((0[1,3-9]|1[0-2])(-)(29|30))))$|^(?:(?:(?:(?:1[6-9]|[2-9]\\d)?(?:0[48]|[2468][048]|[13579][26])|(?:(?:16|[2468][048]|[3579][26])00)))(-)02(-)29)$|^(?:(?:1[6-9]|2[0-9])\\d{2})(-)(?:(?:0[1-9])|(?:1[0-2]))(-)(?:0[1-9]|1\\d|2[0-8])$")) 
	  throw new InvalidException("Date format is invalid. Example format (yyyy-MM-dd) ");
		return checkDateIfEqualOrPrevious(dString);			 
		  
	}

		public String  checkDateIfEqualOrPrevious(String stringdate) {
			
			DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd");
			
			LocalDate datep = LocalDate.parse(stringdate, formatter);
			
			ZoneId defaultZoneId = ZoneId.systemDefault();
			
			Date date = Date.from(datep.atStartOfDay(defaultZoneId).toInstant());

		       LocalDate currentdate = LocalDate.now();
		       
		       LocalDate expiredDate =currentdate.plusMonths(2);
		       int expiredday = expiredDate.getDayOfMonth();
		       int expiredyear = expiredDate.getYear();
		       int expiredmonth= expiredDate.getMonthValue();

				
				LocalDate localDate2 =LocalDate.of(expiredyear,expiredmonth,expiredday );
				Date checkdate = Date.from(localDate2 .atStartOfDay(defaultZoneId).toInstant());
				
				LocalDate localDate3 =LocalDate.of(expiredyear,expiredmonth,expiredday + 1 );

				    date.getTime();
				    
				    if(date.equals(checkdate) ||date.before(checkdate) ) throw new InvalidException("Expiration date must ahead or equal to " + localDate3 + ".");
					return stringdate;
				 

		}

}
