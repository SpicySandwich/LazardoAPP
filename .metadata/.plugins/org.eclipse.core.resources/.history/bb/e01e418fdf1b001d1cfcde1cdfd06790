package com.client.LazardoClient.Validation;

import java.time.LocalDate;
import java.time.ZoneId;
import java.time.format.DateTimeFormatter;

import com.client.LazardoClient.ModelException.InvalidException;
import com.client.LazardoClient.ModelException.NotNullException;

import org.springframework.stereotype.Service;

@Service
public class LocalDateTimeValidation {
	

	public String LocalDateTimeNotNull(String date) {
		    if (date.trim().isEmpty() || date == null) throw new NotNullException("Date cannot be empty");
		    return date;
		    
		}


	public String LocalDateTimeFormatValidation(String input) {
		String dString = LocalDateTimeNotNull(input);
		 if (!dString.matches(
				 "//(^(((\\d\\d)(([02468][048])|([13579][26]))-02-29)|(((\\d\\d)(\\d\\d)))-((((0\\d)|(1[0-2]))-((0\\d)|(1\\d)|(2[0-8])))|((((0[13578])|(1[02]))-31)|(((0[1,3-9])|(1[0-2]))-(29|30)))))\\s(([01]\\d|2[0-3]):([0-5]\\d):([0-5]\\d))$)// "))
		return checkDateIfEqualOrPrevious(dString);			 
		  
	}

		public String  checkDateIfEqualOrPrevious(String stringdate) {
			
			DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
			
			LocalDate datep = LocalDate.parse(stringdate, formatter);
			
			ZoneId defaultZoneId = ZoneId.systemDefault();
			
//			Date date = Date.from(datep.atStartOfDay(defaultZoneId).toInstant());

		       LocalDate currentdate = LocalDate.now();
		       
		       LocalDate expiredDate =currentdate.plusMonths(2);
		       int expiredday = expiredDate.getDayOfMonth();
		       int expiredyear = expiredDate.getYear();
		       int expiredmonth= expiredDate.getMonthValue();

				
				LocalDate localDate2 =LocalDate.of(expiredyear,expiredmonth,expiredday );
		//		Date checkdate = Date.from(localDate2 .atStartOfDay(defaultZoneId).toInstant());
				
				LocalDate localDate3 =LocalDate.of(expiredyear,expiredmonth,expiredday + 1 );
				

			//	    date.getTime();
				    
			//	    if(currentdate.equals( localDate3) ||currentdate.isBefore( localDate3) ) throw new InvalidException("Expiration date must ahead or equal to " + localDate3 + ".");
					return stringdate;
				 

		}

}
